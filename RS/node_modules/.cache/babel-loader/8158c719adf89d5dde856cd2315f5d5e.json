{"ast":null,"code":"var _classCallCheck = require(\"/home/rony/reactApps/RS/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/rony/reactApps/RS/node_modules/@babel/runtime/helpers/createClass\");\n\nvar socketIO = require('socket.io'),\n    extend = require('extend'),\n    log = require('./log'),\n    Client = require('./components/client'),\n    EventEmitter = require('events');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function App(config) {\n    _classCallCheck(this, App);\n\n    this.events = new EventEmitter();\n    this.socket = null;\n    this.clients = [];\n    this.opts = extend({\n      port: 8304,\n      commands: []\n    }, config);\n  }\n\n  _createClass(App, [{\n    key: \"run\",\n    value: function run() {\n      log('server', 'starting...');\n      this.socket = socketIO(this.opts.port);\n      this.socket.on('connection', this.createClient.bind(this));\n      log('server', 'listening on *:%d', this.opts.port);\n    }\n  }, {\n    key: \"createClient\",\n    value: function createClient(socket) {\n      var _this = this;\n\n      var client = new Client(this, socket);\n      this.clients.push(client);\n      this.events.emit('client.connect', client);\n      socket.on('disconnect', function () {\n        _this.events.emit('client.disconnect', client);\n\n        _this.clients.splice(_this.clients.indexOf(client), 1);\n\n        log('server', 'client disconnected');\n\n        _this.logStatistics();\n      });\n      log('server', 'client connected');\n      this.logStatistics();\n    }\n  }, {\n    key: \"logStatistics\",\n    value: function logStatistics() {\n      log('server', '%d clients connected', this.clients.length);\n    }\n  }, {\n    key: \"on\",\n    value: function on(name, callback) {\n      return this.events.on(name, callback);\n    }\n  }]);\n\n  return App;\n}();","map":null,"metadata":{},"sourceType":"script"}